import { sql } from '@vercel/postgres';
import { Tenant } from '../../../types';
import { type NextRequest, NextResponse } from 'next/server';

export const POST = async (request: NextRequest) => {
	const data: { userId: string; tenant: Tenant } = await request.json();
	if (data && data.userId && data.tenant) {
		await sql.query(
			`INSERT INTO tenant (
				"id",
				"name",
				"senderName",
				"idNumber",
				"nationalInsuranceNumber",
				"birthDate",
				"email",
				"phone",
				"address",
				"roomId",
				"apartmentId",
				"rent",
				"rentFirstMonth",
				"rentFirstRent",
				"deposit",
				"account",
				"accountDeposit",
				"iceName",
				"iceLastname",
				"iceIdNumber",
				"iceNationalInsuranceNumber",
				"iceEmail",
				"icePhone",
				"iceAddress",
				"insuranceName",
				"insuranceNumber",
				"insuranceDate",
				"contractDate",
				"contractDateStart",
				"contractDateEnd",
				"contractDateHandoff",
				"notes",
				"isContract",
				"isDeposit",
				"is1stRent",
				"isInsurance",
				"isWarranty",
				"isKey",
				"isProtocol",
				"status",
				"creationTimestamp"
			) 
			VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, to_timestamp($41));`,
			[
				data.tenant.id,
				data.tenant.name,
				data.tenant.senderName,
				data.tenant.idNumber,
				data.tenant.nationalInsuranceNumber,
				data.tenant.birthDate,
				data.tenant.email,
				data.tenant.phone,
				data.tenant.address,
				data.tenant.roomId,
				data.tenant.apartmentId,
				data.tenant.rent,
				data.tenant.rentFirstMonth,
				data.tenant.rentFirstRent,
				data.tenant.deposit,
				data.tenant.account,
				data.tenant.accountDeposit,
				data.tenant.iceName,
				data.tenant.iceLastname,
				data.tenant.iceIdNumber,
				data.tenant.iceNationalInsuranceNumber,
				data.tenant.iceEmail,
				data.tenant.icePhone,
				data.tenant.iceAddress,
				data.tenant.insuranceName,
				data.tenant.insuranceNumber,
				data.tenant.insuranceDate,
				data.tenant.contractDate,
				data.tenant.contractDateStart,
				data.tenant.contractDateEnd,
				data.tenant.contractDateHandoff,
				data.tenant.notes,
				data.tenant.isContract,
				data.tenant.isDeposit,
				data.tenant.is1stRent,
				data.tenant.isInsurance,
				data.tenant.isWarranty,
				data.tenant.isKey,
				data.tenant.isProtocol,
				data.tenant.status,
				data.tenant.creationTimestamp
					? data.tenant.creationTimestamp / 1000
					: 0,
			],
		);
	}
	return NextResponse.json({ message: 'OK' }, { status: 200 });
};

export const GET = async () => {
	const data = await sql`
		SELECT
			"id",
			"name",
			"senderName",
			"idNumber",
			"nationalInsuranceNumber",
			"birthDate",
			"email",
			"phone",
			"address",
			"roomId",
			"apartmentId",
			"rent",
			"rentFirstMonth",
			"rentFirstRent",
			"deposit",
			"account",
			"accountDeposit",
			"iceName",
			"iceLastname",
			"iceIdNumber",
			"iceNationalInsuranceNumber",
			"iceEmail",
			"icePhone",
			"iceAddress",
			"insuranceName",
			"insuranceNumber",
			"insuranceDate",
			"contractDate",
			"contractDateStart",
			"contractDateEnd",
			"contractDateHandoff",
			"notes",
			"isContract",
			"isDeposit",
			"is1stRent",
			"isInsurance",
			"isWarranty",
			"isKey",
			"isProtocol",
			"status",
			(EXTRACT(EPOCH FROM "creationTimestamp") * 1000)::BIGINT AS "creationTimestamp"
		FROM tenant
		ORDER BY "creationTimestamp" DESC;
	`;
	return NextResponse.json({ data: data.rows }, { status: 200 });
};
